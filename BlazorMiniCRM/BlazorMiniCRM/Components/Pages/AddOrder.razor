@page "/orders/add"

@rendermode InteractiveServer

@using BlazorMiniCRM.Services
@using BlazorMiniCRM.Shared.Models
@using System.Linq
@inject OrderServices OrderService
@inject ClientServices ClientService
@inject NavigationManager NavigationManager

<h3>Ajouter une nouvelle Commande</h3>

<div class="card p-4 shadow-sm">
    <EditForm Model="@newOrder" OnValidSubmit="HandleValidSubmit" class="needs-validation" Novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />

        <div class="mb-3">
            <label for="dateOrder" class="form-label">Date de la Commande</label>
            <InputDate id="dateOrder" class="form-control" @bind-Value="newOrder.DateOrder" />
            <ValidationMessage For="@(() => newOrder.DateOrder)" />
        </div>

        <div class="mb-3">
            <label for="montant" class="form-label">Montant</label>
            <InputNumber id="montant" class="form-control" @bind-Value="newOrder.Montant" />
            <ValidationMessage For="@(() => newOrder.Montant)" />
        </div>

        <div class="mb-3">
            <label for="client" class="form-label">Client</label>
            @if (clients == null)
            {
                <p>Chargement des clients...</p>
            }
            else if (!clients.Any())
            {
                <p>Aucun client disponible. Veuillez ajouter des clients d'abord.</p>
            }
            else
            {
                <InputSelect id="client" class="form-select" @bind-Value="newOrder.ClientId">
                    <option value="0">-- Sélectionner un client --</option>
                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newOrder.ClientId)" />
            }
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Ajouter la Commande</button>
            <button type="button" class="btn btn-secondary" @onclick="NavigateToOrders">Annuler</button>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="mt-3 alert @feedbackCssClass">@feedbackMessage</div>
}

@code {
    private Order newOrder = new Order { DateOrder = DateTime.Now, Montant = 0.00m };
    private List<Client>? clients;
    private string feedbackMessage = string.Empty;
    private string feedbackCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        clients = (await ClientService.GetClientsAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        feedbackMessage = string.Empty;
        feedbackCssClass = string.Empty;

        if (newOrder.ClientId == 0)
        {
            feedbackMessage = "Veuillez sélectionner un client.";
            feedbackCssClass = "alert-warning";
            return;
        }

        try
        {
            await OrderService.AddOrderAsync(newOrder);
            feedbackMessage = "Commande ajoutée avec succès !";
            feedbackCssClass = "alert-success";
            newOrder = new Order { DateOrder = DateTime.Now, Montant = 0.00m };
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/orders");
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erreur lors de l'ajout de la commande: {ex.Message}";
            feedbackCssClass = "alert-danger";
        }
    }

    private void NavigateToOrders()
    {
        NavigationManager.NavigateTo("/orders");
    }
}