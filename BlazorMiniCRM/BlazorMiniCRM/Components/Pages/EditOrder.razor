@page "/orders/edit/{OrderId:int}"

@rendermode InteractiveServer

@using BlazorMiniCRM.Services
@using BlazorMiniCRM.Shared.Models
@using System.Linq
@inject OrderServices OrderService
@inject ClientServices ClientService
@inject NavigationManager NavigationManager


<h3>Modifier la Commande</h3>

@if (order == null && !isLoading)
{
    <p><em>Commande introuvable ou erreur de chargement.</em></p>
}
else if (isLoading)
{
    <p><em>Chargement de la commande...</em></p>
}
else if (order != null)
{
    <div class="card p-4 shadow-sm">
        <EditForm Model="@order" OnValidSubmit="HandleValidSubmit" class="needs-validation" Novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="mb-3">
                <label for="orderId" class="form-label">ID Commande</label>
                @* CORRECTION ICI : Utiliser InputNumber au lieu de InputText pour un champ int *@
                <InputNumber id="orderId" class="form-control" @bind-Value="order.Id" disabled />
            </div>

            <div class="mb-3">
                <label for="dateOrder" class="form-label">Date de la Commande</label>
                <InputDate id="dateOrder" class="form-control" @bind-Value="order.DateOrder" />
                <ValidationMessage For="@(() => order.DateOrder)" />
            </div>

            <div class="mb-3">
                <label for="montant" class="form-label">Montant</label>
                <InputNumber id="montant" class="form-control" @bind-Value="order.Montant" />
                <ValidationMessage For="@(() => order.Montant)" />
            </div>

            <div class="mb-3">
                <label for="client" class="form-label">Client</label>
                @if (clients == null)
                {
                    <p>Chargement des clients...</p>
                }
                else if (!clients.Any())
                {
                    <p>Aucun client disponible. Veuillez ajouter des clients d'abord.</p>
                }
                else
                {
                    <InputSelect id="client" class="form-select" @bind-Value="order.ClientId">
                        <option value="0">-- Sélectionner un client --</option>
                        @foreach (var clientItem in clients)
                        {
                            <option value="@clientItem.Id">@clientItem.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => order.ClientId)" />
                }
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Enregistrer les modifications</button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToOrders">Annuler</button>
            </div>
        </EditForm>
    </div>
}

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="mt-3 alert @feedbackCssClass">@feedbackMessage</div>
}

@code {
    [Parameter]
    public int OrderId { get; set; }

    private Order? order;
    private List<Client>? clients;
    private bool isLoading = true;

    private string feedbackMessage = string.Empty;
    private string feedbackCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            order = await OrderService.GetOrderByIdAsync(OrderId);
            clients = (await ClientService.GetClientsAsync()).ToList();

            if (order == null)
            {
                feedbackMessage = "Commande non trouvée.";
                feedbackCssClass = "alert-warning";
            }
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erreur lors du chargement de la commande: {ex.Message}";
            feedbackCssClass = "alert-danger";
            order = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        feedbackMessage = string.Empty;
        feedbackCssClass = string.Empty;

        if (order == null)
        {
            feedbackMessage = "La commande à modifier n'est pas chargée.";
            feedbackCssClass = "alert-danger";
            return;
        }

        if (order.ClientId == 0)
        {
            feedbackMessage = "Veuillez sélectionner un client.";
            feedbackCssClass = "alert-warning";
            return;
        }

        try
        {
            await OrderService.UpdateOrderAsync(order);
            feedbackMessage = "Commande modifiée avec succès !";
            feedbackCssClass = "alert-success";
            await Task.Delay(1500);
            NavigateToOrders();
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erreur lors de la modification de la commande: {ex.Message}";
            feedbackCssClass = "alert-danger";
        }
    }

    private void NavigateToOrders()
    {
        NavigationManager.NavigateTo("/orders");
    }
}