@page "/" 

@rendermode InteractiveServer

@using BlazorMiniCRM.Services
@using BlazorMiniCRM.Shared.Models
@inject ClientServices ClientService
@inject OrderServices OrderService
@inject NavigationManager NavigationManager

<PageTitle>Accueil</PageTitle>

<h3 class="mb-4">Bienvenue dans Mini-CRM !</h3>

@if (isLoading)
{
    <p><em>Chargement du tableau de bord...</em></p>
}
else
{
    <div class="row g-4 mb-5">
        <div class="col-md-4">
            <div class="card text-center shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-primary"><i class="bi bi-people-fill me-2"></i> Clients</h5>
                    <p class="card-text fs-1 fw-bold">@totalClients</p>
                    <a href="/clients" class="btn btn-outline-primary">Voir tous les clients</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-success"><i class="bi bi-receipt me-2"></i> Commandes</h5>
                    <p class="card-text fs-1 fw-bold">@totalOrders</p>
                    <a href="/orders" class="btn btn-outline-success">Voir toutes les commandes</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title text-info"><i class="bi bi-currency-euro me-2"></i> Montant Total</h5>
                    <p class="card-text fs-1 fw-bold">@totalAmount.ToString("C2")</p>
                    <small class="text-muted">Toutes les commandes confondues</small>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-plus-circle me-2"></i> Actions Rapides</h5>
                </div>
                <div class="card-body d-grid gap-2">
                    <button class="btn btn-outline-secondary btn-lg" @onclick="NavigateToAddClient">
                        <i class="bi bi-person-plus me-2"></i> Ajouter un nouveau client
                    </button>
                    <button class="btn btn-outline-secondary btn-lg" @onclick="NavigateToAddOrder">
                        <i class="bi bi-cart-plus me-2"></i> Ajouter une nouvelle commande
                    </button>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i> Dernières Commandes</h5>
                </div>
                <div class="card-body">
                    @if (!latestOrders.Any())
                    {
                        <p class="text-muted">Aucune commande récente à afficher.</p>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var order in latestOrders)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <span class="fw-bold">Commande ID: @order.Id</span><br />
                                        <small class="text-muted">@order.Client?.Name - @order.DateOrder.ToString("dd/MM/yyyy HH:mm")</small>
                                    </div>
                                    <span class="badge bg-success rounded-pill">@order.Montant.ToString("C2")</span>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private int totalClients = 0;
    private int totalOrders = 0;
    private decimal totalAmount = 0m;
    private IEnumerable<Order> latestOrders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            totalClients = await ClientService.GetTotalClientsCountAsync();
            totalOrders = await OrderService.GetTotalOrdersCountAsync();
            totalAmount = await OrderService.GetTotalOrdersAmountAsync();
            latestOrders = await OrderService.GetLatestOrdersAsync(5); // Récupère les 5 dernières commandes
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des données du tableau de bord: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToAddClient()
    {
        NavigationManager.NavigateTo("/clients/add");
    }

    private void NavigateToAddOrder()
    {
        NavigationManager.NavigateTo("/orders/add");
    }
}