@page "/clients"
@rendermode @(new InteractiveAutoRenderMode()) 
@using BlazorMiniCRM.Services 
@using BlazorMiniCRM.Shared.Models
@inject ClientServices ClientService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="mb-4">Gestion des Clients</h3>

<div class="card p-4 mb-4 shadow-sm">
    <h4 class="mb-3">Ajouter un nouveau Client</h4>
    <div class="row g-3 align-items-center">
        <div class="col-md-5">
            <input type="text" class="form-control" @bind="NewClient.Name" placeholder="Nom du client" aria-label="Nom du client" />
        </div>
        <div class="col-md-5">
            <input type="email" class="form-control" @bind="NewClient.Email" placeholder="Email du client" aria-label="Email du client" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="AddClient">Ajouter</button>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <div class="mt-3 alert @feedbackCssClass">@feedbackMessage</div>
    }
</div>

<h4 class="mt-5 mb-3">Liste des Clients enregistrés</h4>

@if (Clientlst == null)
{
    <p><em>Chargement des clients...</em></p>
}
else if (!Clientlst.Any())
{
    <div class="alert alert-info" role="alert">
        Aucun client enregistré pour le moment. Utilisez le formulaire ci-dessus pour en ajouter un.
    </div>
}
else
{
    <table class="table table-hover table-bordered mt-4">
        <thead class="table-dark">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Nom</th>
                <th scope="col">Email</th>
                <th scope="col" class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Clientlst)
            {
                <tr>
                    <td>@client.Id</td>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td class="text-center">
                        <a href="/clients/edit/@client.Id" class="btn btn-sm btn-info me-2">Modifier</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteClient(client.Id)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Client> Clientlst = new();
    private Client NewClient = new();
    private string feedbackMessage = string.Empty;
    private string feedbackCssClass = string.Empty;

    // Appelé une fois au démarrage du composant
    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    // Charge les clients depuis le service
    private async Task LoadClientsAsync()
    {
        Clientlst = (await ClientService.GetClientsAsync()).ToList();
    }

    // Gère l'ajout d'un nouveau client
    private async Task AddClient()
    {
        feedbackMessage = string.Empty;
        feedbackCssClass = string.Empty;

        if (string.IsNullOrWhiteSpace(NewClient.Name) || string.IsNullOrWhiteSpace(NewClient.Email))
        {
            feedbackMessage = "Nom et Email sont requis.";
            feedbackCssClass = "alert-warning";
            return;
        }

        try
        {
            await ClientService.AddClientAsync(NewClient); // Appel du service pour ajouter le client
            NewClient = new Client(); // Réinitialise le formulaire pour une nouvelle entrée
            await LoadClientsAsync(); // Recharge la liste pour afficher le nouveau client
            feedbackMessage = "Client ajouté avec succès !";
            feedbackCssClass = "alert-success";
            StateHasChanged(); // Force le rafraîchissement de l'UI
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erreur lors de l'ajout du client: {ex.Message}";
            feedbackCssClass = "alert-danger";
        }
    }

    // Gère la suppression d'un client
    private async Task DeleteClient(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce client ? Toutes les commandes associées seront également supprimées.");
        if (confirm)
        {
            try
            {
                await ClientService.DeleteClientAsync(id); // Appel du service pour supprimer le client
                await LoadClientsAsync(); // Recharge la liste après suppression
                feedbackMessage = "Client supprimé avec succès !";
                feedbackCssClass = "alert-success";
                StateHasChanged(); // Force le rafraîchissement de l'UI
            }
            catch (Exception ex)
            {
                feedbackMessage = $"Erreur lors de la suppression du client: {ex.Message}";
                feedbackCssClass = "alert-danger";
            }
        }
    }
}