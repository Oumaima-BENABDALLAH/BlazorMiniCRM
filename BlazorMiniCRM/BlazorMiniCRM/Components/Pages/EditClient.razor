@page "/clients/edit/{ClientId:int}"
@rendermode @(new InteractiveAutoRenderMode())
@using BlazorMiniCRM.Services
@using BlazorMiniCRM.Shared.Models
@inject ClientServices ClientService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Modifier le Client</h3>

@if (client == null)
{
    <p><em>Chargement du client ou client introuvable...</em></p>
}
else
{
    <div class="card p-4 shadow-sm">
        <EditForm Model="@client" OnValidSubmit="HandleValidSubmit" class="needs-validation" Novalidate>
            <DataAnnotationsValidator /> @* Active la validation basée sur les DataAnnotations des modèles *@
            <ValidationSummary class="alert alert-danger" /> @* Affiche les messages d'erreur de validation *@

            <div class="mb-3">
                <label for="name" class="form-label">Nom</label>
                <InputText id="name" class="form-control" @bind-Value="client.Name" />
                <ValidationMessage For="@(() => client.Name)" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="client.Email" />
                <ValidationMessage For="@(() => client.Email)" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-success">Enregistrer les modifications</button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToClients">Annuler</button>
            </div>
        </EditForm>
    </div>

    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <div class="mt-3 alert @feedbackCssClass">@feedbackMessage</div>
    }
}

@code {
    [Parameter] // Permet de recevoir le paramètre ClientId de l'URL
    public int ClientId { get; set; }

    private Client? client; // Le client à modifier
    private string feedbackMessage = string.Empty;
    private string feedbackCssClass = string.Empty;

    // Appelé quand les paramètres du composant sont définis (y compris l'ID de l'URL)
    protected override async Task OnParametersSetAsync()
    {
        // Charge le client correspondant à l'ID reçu
        client = await ClientService.GetClientByIdAsync(ClientId);
        if (client == null)
        {
            // Si le client n'est pas trouvé, rediriger ou afficher un message d'erreur
            feedbackMessage = $"Client avec l'ID {ClientId} introuvable.";
            feedbackCssClass = "alert-danger";
        }
    }

    private async Task HandleValidSubmit()
    {
        feedbackMessage = string.Empty;
        feedbackCssClass = string.Empty;

        if (client == null)
        {
            feedbackMessage = "Erreur : Client non chargé.";
            feedbackCssClass = "alert-danger";
            return;
        }

        try
        {
            await ClientService.UpdateClientAsync(client); // Appel du service pour mettre à jour
            feedbackMessage = "Client mis à jour avec succès !";
            feedbackCssClass = "alert-success";
            // Rediriger après un court délai pour que l'utilisateur voie le message
            await Task.Delay(1500); // Délai de 1.5 seconde
            NavigateToClients(); // Retour à la liste
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erreur lors de la mise à jour du client: {ex.Message}";
            feedbackCssClass = "alert-danger";
        }
    }

    // Redirige vers la page de la liste des clients
    private void NavigateToClients()
    {
        NavigationManager.NavigateTo("/clients");
    }
}